'use strict';

const sequence = new Set([ '[', ']', '{', '}', '(', ')' ]);
const reserved = new Set([ 'nil', 'null', 'true', 'false' ]);
const nil = new Set([ 'nil', 'null' ]);
const whitespace = /[:\s,]/;
const symbolHead = /[a-z-_'%<>=&\$\.\+\*\!\?\^]/i;
const symbolTail = /[a-z-_'%<>=&:\$\.\+\*\!\?\^0-9@]/i;
const numeric = /[0-9]/;
const signs = new Set([ '-', '+' ]);
const argvSpace = new Set([ '[', ']', '{', '}', '(', ')', ',', ':' ]);

exports.isSequence = v => sequence.has(v);
exports.isMapIndicator = v => v === ':';
exports.isWhitespace = v => whitespace.test(v);
exports.isComment = v => v === '#';
exports.isNumeric = v => numeric.test(v) || v === '.';
exports.isNumericFalsePositive = v => [ v[0], v[v.length - 1] ].includes('.') || v.split('.').length > 2;
exports.isSymbolHead = v => v != null && symbolHead.test(v);
exports.isSymbolTail = v => v != null && symbolTail.test(v);
exports.isSingleQuote = v => v === "'";
exports.isSingleQuoteCont = (cur, prev) => cur !== "'" || prev === '\\';
exports.isDoubleQuote = v => v === '"';
exports.isDoubleQuoteCont = (cur, prev) => cur !== '"' || prev === '\\';
exports.isTagPrefix = v => v === '@';
exports.isGenSymSuffix = v => v === '^';
exports.isNil = v => nil.has(v);
exports.isTrue = v => v === 'true';
exports.isFalse = v => v === 'false';
exports.isColon = v => v === ':';
exports.isComma = v => v === ',';
exports.isReserved = v => reserved.has(v);
exports.isSigned = v => signs.has(v);
exports.isNegativeZero = v => v === '-0';
exports.isArgvString = v => v != null && !argvSpace.has(v);
